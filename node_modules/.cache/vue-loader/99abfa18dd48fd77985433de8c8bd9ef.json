{"remainingRequest":"/Users/jasonspinson/Desktop/autopass/project/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jasonspinson/Desktop/autopass/project/node_modules/vue2-gmap-custom-marker/gmap-custom-marker.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jasonspinson/Desktop/autopass/project/node_modules/vue2-gmap-custom-marker/gmap-custom-marker.vue","mtime":499162500000},{"path":"/Users/jasonspinson/Desktop/autopass/project/node_modules/cache-loader/dist/cjs.js","mtime":1538640632416},{"path":"/Users/jasonspinson/Desktop/autopass/project/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jasonspinson/Desktop/autopass/project/node_modules/cache-loader/dist/cjs.js","mtime":1538640632416},{"path":"/Users/jasonspinson/Desktop/autopass/project/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n\nimport * as VueGoogleMaps from 'vue2-google-maps'\nexport default {\n  mixins: [VueGoogleMaps.MapElementMixin],\n  props: {\n    delayRepaint: {\n      type: Number,\n      default: undefined\n    },\n    marker: {\n      type: Object,\n      default: undefined\n    },\n    offsetX: {\n      type: Number,\n      default: 0\n    },\n    offsetY: {\n      type: Number,\n      default: 0\n    },\n    alignment: {\n      type: String,\n      default: \"top\"\n    }\n  },\n  data () {\n    return {\n      opacity: 0.01\n    }\n  },\n  watch: {\n    marker (val) {\n      this.$mapPromise.then(map => this.$overlay.setPosition())\n    },\n  },\n  provide () {\n    const self = this\n    this.$mapPromise.then(map => {\n      class Overlay extends google.maps.OverlayView {\n        constructor (map) {\n          super()\n          this.setMap(map)\n          this.draw = () => this.repaint()\n          this.setPosition = () => this.repaint()\n        }\n        repaint () {\n          const div = self.$el\n          const projection = this.getProjection()\n          if (projection && div) {\n            const posPixel = projection.fromLatLngToDivPixel(self.position)\n            let x, y\n            switch (self.alignment) {\n              case \"top\":\n                x = posPixel.x - (div.offsetWidth / 2)\n                y = posPixel.y - div.offsetHeight\n                break\n              case \"bottom\":\n                x = posPixel.x - (div.offsetWidth / 2)\n                y = posPixel.y\n                break\n              case \"left\":\n                x = posPixel.x - div.offsetWidth\n                y = posPixel.y - (div.offsetHeight / 2)\n                break\n              case \"right\":\n                x = posPixel.x\n                y = posPixel.y - (div.offsetHeight / 2)\n                break\n              case \"center\":\n                x = posPixel.x - (div.offsetWidth / 2)\n                y = posPixel.y - (div.offsetHeight / 2)\n                break\n              case \"topleft\":\n              case \"lefttop\":\n                x = posPixel.x - div.offsetWidth\n                y = posPixel.y - div.offsetHeight\n                break\n              case \"topright\":\n              case \"righttop\":\n                x = posPixel.x\n                y = posPixel.y - div.offsetHeight\n                break\n              case \"bottomleft\":\n              case \"leftop\":\n                x = posPixel.x - div.offsetWidth\n                y = posPixel.y\n                break\n              case \"bottomright\":\n              case \"rightbottom\":\n                x = posPixel.x\n                y = posPixel.y\n                break\n              default:\n                throw new Error(\"Invalid alignment type of custom marker!\")\n                break\n              }\n            div.style.left = (x + self.offsetX) + 'px'\n            div.style.top = (y + self.offsetY) + 'px'\n          }\n        }\n        onAdd () {\n          const div = self.$el\n          const panes = this.getPanes()\n          div.style.position = 'absolute'\n          div.style.display = 'inline-block'\n          div.style.zIndex = 50\n          panes.overlayLayer.appendChild(div)\n          panes.overlayMouseTarget.appendChild(div)\n        }\n        onRemove () {\n          self.$el.remove()\n        }\n      }\n      this.$overlay = new Overlay(map)\n      if (this.delayRepaint) {\n        setTimeout(() => {\n          this.$overlay.repaint()\n          this.opacity = 1\n        }, this.delayRepaint)\n      } else {\n        this.opacity = 1\n      }\n    })\n  },\n  computed: {\n    lat () {\n      return parseFloat(this.marker.lat || this.marker.latitude)\n    },\n    lng () {\n      return parseFloat(this.marker.lng || this.marker.longitude)\n    },\n    position () {\n      const self = this\n      return {\n        lat () {\n          return self.lat\n        },\n        lng () {\n          return self.lng\n        }\n      }\n    }\n  },\n  destroyed () {\n    this.$overlay.setMap(null)\n    this.$overlay = undefined\n  }\n}\n",{"version":3,"sources":["gmap-custom-marker.vue"],"names":[],"mappingsfile":"gmap-custom-marker.vue","sourceRoot":"node_modules/vue2-gmap-custom-marker","sourcesContent":["<template><div :style=\"{opacity: opacity}\"><slot/></div></template>\n<script>\nimport * as VueGoogleMaps from 'vue2-google-maps'\nexport default {\n  mixins: [VueGoogleMaps.MapElementMixin],\n  props: {\n    delayRepaint: {\n      type: Number,\n      default: undefined\n    },\n    marker: {\n      type: Object,\n      default: undefined\n    },\n    offsetX: {\n      type: Number,\n      default: 0\n    },\n    offsetY: {\n      type: Number,\n      default: 0\n    },\n    alignment: {\n      type: String,\n      default: \"top\"\n    }\n  },\n  data () {\n    return {\n      opacity: 0.01\n    }\n  },\n  watch: {\n    marker (val) {\n      this.$mapPromise.then(map => this.$overlay.setPosition())\n    },\n  },\n  provide () {\n    const self = this\n    this.$mapPromise.then(map => {\n      class Overlay extends google.maps.OverlayView {\n        constructor (map) {\n          super()\n          this.setMap(map)\n          this.draw = () => this.repaint()\n          this.setPosition = () => this.repaint()\n        }\n        repaint () {\n          const div = self.$el\n          const projection = this.getProjection()\n          if (projection && div) {\n            const posPixel = projection.fromLatLngToDivPixel(self.position)\n            let x, y\n            switch (self.alignment) {\n              case \"top\":\n                x = posPixel.x - (div.offsetWidth / 2)\n                y = posPixel.y - div.offsetHeight\n                break\n              case \"bottom\":\n                x = posPixel.x - (div.offsetWidth / 2)\n                y = posPixel.y\n                break\n              case \"left\":\n                x = posPixel.x - div.offsetWidth\n                y = posPixel.y - (div.offsetHeight / 2)\n                break\n              case \"right\":\n                x = posPixel.x\n                y = posPixel.y - (div.offsetHeight / 2)\n                break\n              case \"center\":\n                x = posPixel.x - (div.offsetWidth / 2)\n                y = posPixel.y - (div.offsetHeight / 2)\n                break\n              case \"topleft\":\n              case \"lefttop\":\n                x = posPixel.x - div.offsetWidth\n                y = posPixel.y - div.offsetHeight\n                break\n              case \"topright\":\n              case \"righttop\":\n                x = posPixel.x\n                y = posPixel.y - div.offsetHeight\n                break\n              case \"bottomleft\":\n              case \"leftop\":\n                x = posPixel.x - div.offsetWidth\n                y = posPixel.y\n                break\n              case \"bottomright\":\n              case \"rightbottom\":\n                x = posPixel.x\n                y = posPixel.y\n                break\n              default:\n                throw new Error(\"Invalid alignment type of custom marker!\")\n                break\n              }\n            div.style.left = (x + self.offsetX) + 'px'\n            div.style.top = (y + self.offsetY) + 'px'\n          }\n        }\n        onAdd () {\n          const div = self.$el\n          const panes = this.getPanes()\n          div.style.position = 'absolute'\n          div.style.display = 'inline-block'\n          div.style.zIndex = 50\n          panes.overlayLayer.appendChild(div)\n          panes.overlayMouseTarget.appendChild(div)\n        }\n        onRemove () {\n          self.$el.remove()\n        }\n      }\n      this.$overlay = new Overlay(map)\n      if (this.delayRepaint) {\n        setTimeout(() => {\n          this.$overlay.repaint()\n          this.opacity = 1\n        }, this.delayRepaint)\n      } else {\n        this.opacity = 1\n      }\n    })\n  },\n  computed: {\n    lat () {\n      return parseFloat(this.marker.lat || this.marker.latitude)\n    },\n    lng () {\n      return parseFloat(this.marker.lng || this.marker.longitude)\n    },\n    position () {\n      const self = this\n      return {\n        lat () {\n          return self.lat\n        },\n        lng () {\n          return self.lng\n        }\n      }\n    }\n  },\n  destroyed () {\n    this.$overlay.setMap(null)\n    this.$overlay = undefined\n  }\n}\n</script>\n"]}]}